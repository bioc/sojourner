% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/maskTracks.R
\docType{methods}
\name{maskTracks}
\alias{maskTracks}
\alias{maskPoint}
\alias{indexCell}
\alias{filterOnCell}
\alias{sampleTracks}
\title{maskTracks}
\usage{
maskTracks(folder, trackll)

indexCell(folder, trackll, areaFilter = c(0, Inf), 
intensityFilter = c(0, Inf), export = F, max.pixel = 128)

filterOnCell(trackll, numTracks = 0)

sampleTracks(trackll, num = 0)
}
\arguments{
\item{folder}{Full path to the output files.}

\item{trackll}{A list of track lists.}

\item{export}{Logical indicate if .csv output file should be generated}

\item{max.pixel}{Pixel dimension of image}

\item{areaFilter}{Range of cell areas (pixel sq) to keep in filtering}

\item{intensityFilter}{Range of avg cell intensities (grayscale) to keep in filtering}

\item{numTracks}{Minimum number of required tracks in the trackll}

\item{num}{Number of tracks to randomly sample per trackl in trackll}
}
\description{
apply binary image masks to lists of track lists
}
\details{
IMPORTANT: It will take an extremely long time to mask unfiltered data. Filter first using filterTrack(trackll,filter=c(min=7,max=Inf)), then mask using maskTracks(folder, trackll)!
Note the mask file should have the same name as the output files with a "_MASK.tif" ending. 
If there are more mask files than trackll, masking will fail. If there are less mask files, trackls without masks will be deleted.
Users can use plotMask() and plotTrackOverlay() to see the mask and its effect on screening tracks.

indexCell() will mask a trackll, separate each cell into a trackl, display all cell areas and mean intensities, and then apply any area and intensity filters.
There is also the capability to export the final areas/intensities as "indexCell.csv" to the home directory and the pixel dimensions can be changed.

filterOnCell() eliminates all trackl in trackll that has less than numTracks tracks.

sampleTracks() randomly samples num number of tracks for each trackl in trackll.
}
\examples{
#Basic masking with folder path with image masks
folder = system.file("extdata","ImageJ",package="sojourner")
trackll = createTrackll(folder, input = 3)
trackll.masked <- maskTracks(folder = folder, trackll = trackll)

#Compare the masking effect
plotTrackOverlay(trackll)
plotTrackOverlay(trackll.masked)

#Plot mask
mask.list=list.files(path=folder,pattern="_MASK.tif",full.names=TRUE)
plotMask(folder)

#If Nuclear image is available
plotNucTrackOverlay(folder=folder,trackll=trackll)
plotNucTrackOverlay(folder=folder,trackll=trackll.masked)

#Plot mask
plotMask(folder=folder)
}
